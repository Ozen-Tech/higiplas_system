#!/usr/bin/env python3
"""
Script para criar uma vers√£o tempor√°ria do DELETE de clientes
que n√£o depende da verifica√ß√£o de or√ßamentos (que est√° falhando com erro 500).
"""

import requests
import json

def create_temp_delete_fix():
    """Cria uma corre√ß√£o tempor√°ria para o DELETE de clientes."""
    
    print("üîß Criando corre√ß√£o tempor√°ria para DELETE de clientes...")
    
    # C√≥digo da fun√ß√£o delete_cliente modificada (sem verifica√ß√£o de or√ßamentos)
    temp_delete_function = '''
def delete_cliente_temp(db: Session, cliente_id: int, empresa_id: int):
    """Exclui um cliente (vers√£o tempor√°ria sem verifica√ß√£o de or√ßamentos)."""
    db_cliente = get_cliente_by_id(db, cliente_id, empresa_id)
    if not db_cliente:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Cliente n√£o encontrado."
        )
    
    # COMENTADO TEMPORARIAMENTE - A verifica√ß√£o de or√ßamentos est√° causando erro 500
    # # Verifica se o cliente tem or√ßamentos associados
    # orcamentos_count = db.query(models.Orcamento).filter(
    #     models.Orcamento.cliente_id == cliente_id
    # ).count()
    # 
    # if orcamentos_count > 0:
    #     raise HTTPException(
    #         status_code=status.HTTP_400_BAD_REQUEST,
    #         detail="N√£o √© poss√≠vel excluir cliente com or√ßamentos associados."
    #     )
    
    # Por enquanto, permite a exclus√£o sem verificar or√ßamentos
    # TODO: Corrigir o problema no endpoint de or√ßamentos e reativar a verifica√ß√£o
    
    db.delete(db_cliente)
    db.commit()
    return {"message": "Cliente exclu√≠do com sucesso (verifica√ß√£o de or√ßamentos temporariamente desabilitada)"}
'''
    
    print("\nüìù Fun√ß√£o tempor√°ria criada:")
    print(temp_delete_function)
    
    print("\n=== INSTRU√á√ïES PARA APLICAR A CORRE√á√ÉO ===")
    print("1. Abra o arquivo backend/app/crud/cliente.py")
    print("2. Substitua a fun√ß√£o delete_cliente pela vers√£o tempor√°ria acima")
    print("3. Fa√ßa o deploy da corre√ß√£o")
    print("4. Teste o DELETE de clientes")
    print("5. Depois corrija o problema real no endpoint de or√ßamentos")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("   - Esta √© uma solu√ß√£o TEMPOR√ÅRIA")
    print("   - Clientes poder√£o ser exclu√≠dos mesmo com or√ßamentos associados")
    print("   - Corrija o problema no endpoint /orcamentos o mais r√°pido poss√≠vel")
    
    print("\nüîç PROBLEMA REAL A SER CORRIGIDO:")
    print("   - Endpoint /orcamentos retorna erro 500")
    print("   - Isso afeta a verifica√ß√£o no DELETE de clientes")
    print("   - Verifique logs do Render para mais detalhes")
    print("   - Pode ser problema de JOIN, timeout ou relacionamento no banco")

def test_current_delete():
    """Testa o DELETE atual para confirmar o erro 401."""
    
    base_url = "https://higiplas-system.onrender.com"
    
    print("\nüß™ Testando DELETE atual (deve dar erro 401/500)...")
    
    # 1. Fazer login
    login_data = {
        "username": "enzo.alverde@gmail.com",
        "password": "enzolilia"
    }
    
    login_response = requests.post(f"{base_url}/users/token", data=login_data)
    if login_response.status_code != 200:
        print(f"‚ùå Erro no login: {login_response.text}")
        return
    
    token = login_response.json()["access_token"]
    headers = {"Authorization": f"Bearer {token}"}
    
    # 2. Listar clientes
    clientes_response = requests.get(f"{base_url}/clientes", headers=headers)
    if clientes_response.status_code != 200:
        print(f"‚ùå Erro ao listar clientes: {clientes_response.text}")
        return
    
    clientes = clientes_response.json()
    if not clientes:
        print("‚ö†Ô∏è  Nenhum cliente encontrado para testar")
        return
    
    cliente_id = clientes[0]['id']
    print(f"üìã Testando DELETE do cliente ID: {cliente_id}")
    
    # 3. Tentar DELETE
    delete_response = requests.delete(f"{base_url}/clientes/{cliente_id}", headers=headers)
    print(f"   Status: {delete_response.status_code}")
    
    if delete_response.status_code == 401:
        print("   ‚ùå Erro 401 (Unauthorized) - Problema de autentica√ß√£o")
        print("   üí° Verifique se o token est√° sendo enviado corretamente")
    elif delete_response.status_code == 500:
        print("   ‚ùå Erro 500 (Internal Server Error) - Problema no backend")
        print("   üí° Confirmado: Problema na verifica√ß√£o de or√ßamentos")
    else:
        print(f"   ‚ÑπÔ∏è  Resposta: {delete_response.text}")

if __name__ == "__main__":
    print("=== CORRE√á√ÉO TEMPOR√ÅRIA PARA DELETE DE CLIENTES ===")
    create_temp_delete_fix()
    test_current_delete()
    print("\n=== CORRE√á√ÉO CRIADA ===")