#!/usr/bin/env python3
"""
Script para aplicar migra√ß√£o no banco de produ√ß√£o do Render.
"""

import os
import subprocess
import sys

def run_migration_on_render():
    """Executa a migra√ß√£o no ambiente de produ√ß√£o do Render."""
    
    print("=== APLICANDO MIGRA√á√ÉO NO RENDER ===")
    print("Este script ir√° aplicar a migra√ß√£o que adiciona as colunas faltantes")
    print("na tabela historico_pagamentos no banco de produ√ß√£o.")
    print()
    
    # Verifica se estamos no diret√≥rio correto
    if not os.path.exists('alembic.ini'):
        print("‚ùå Arquivo alembic.ini n√£o encontrado. Execute este script no diret√≥rio backend.")
        return False
    
    try:
        # Primeiro, vamos fazer commit e push das altera√ß√µes
        print("üì§ Fazendo commit das altera√ß√µes da migra√ß√£o...")
        
        # Add files
        subprocess.run(['git', 'add', '.'], check=True, cwd='.')
        
        # Commit
        commit_result = subprocess.run([
            'git', 'commit', '-m', 
            'fix: add missing columns to historico_pagamentos table\n\n- Add data_vencimento column\n- Add numero_nf column\n- Add data_criacao column\n- Add orcamento_id column and foreign key\n- Fix schema validation error in production'
        ], cwd='.', capture_output=True, text=True)
        
        if commit_result.returncode == 0:
            print("‚úÖ Commit realizado com sucesso")
        else:
            print(f"‚ö†Ô∏è  Commit: {commit_result.stdout} {commit_result.stderr}")
        
        # Push
        print("üì§ Fazendo push para o reposit√≥rio...")
        push_result = subprocess.run(['git', 'push', 'origin', 'main'], 
                                   check=True, cwd='.', capture_output=True, text=True)
        print("‚úÖ Push realizado com sucesso")
        
        print("\nüöÄ Altera√ß√µes enviadas para o reposit√≥rio!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Acesse o dashboard do Render: https://dashboard.render.com")
        print("2. V√° para o seu servi√ßo 'higiplas-system'")
        print("3. Clique em 'Manual Deploy' -> 'Deploy latest commit'")
        print("4. Aguarde o deploy terminar")
        print("5. Acesse os logs do servi√ßo para verificar se a migra√ß√£o foi aplicada")
        print("\n‚ö†Ô∏è  IMPORTANTE: A migra√ß√£o ser√° aplicada automaticamente durante o deploy")
        print("   pois o comando 'alembic upgrade head' est√° no script de inicializa√ß√£o.")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        print(f"Sa√≠da: {e.stdout if hasattr(e, 'stdout') else 'N/A'}")
        print(f"Erro: {e.stderr if hasattr(e, 'stderr') else 'N/A'}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def show_manual_instructions():
    """Mostra instru√ß√µes manuais caso o script autom√°tico falhe."""
    print("\n=== INSTRU√á√ïES MANUAIS ===")
    print("Se preferir fazer manualmente:")
    print()
    print("1. Commit e push das altera√ß√µes:")
    print("   git add .")
    print("   git commit -m 'fix: add missing columns to historico_pagamentos table'")
    print("   git push origin main")
    print()
    print("2. No Render Dashboard:")
    print("   - Acesse https://dashboard.render.com")
    print("   - V√° para o servi√ßo 'higiplas-system'")
    print("   - Clique em 'Manual Deploy' -> 'Deploy latest commit'")
    print()
    print("3. Monitore os logs durante o deploy para verificar se a migra√ß√£o foi aplicada.")

if __name__ == "__main__":
    print("üîß CORRE√á√ÉO DO BANCO DE DADOS DE PRODU√á√ÉO")
    print("Este script ir√° preparar e aplicar a corre√ß√£o no Render.")
    print()
    
    resposta = input("Deseja continuar com o deploy autom√°tico? (s/N): ").lower().strip()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        success = run_migration_on_render()
        if not success:
            show_manual_instructions()
    else:
        show_manual_instructions()