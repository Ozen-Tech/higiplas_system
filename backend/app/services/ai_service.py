# /backend/app/services/ai_service.py

import google.generativeai as genai
from typing import List, Dict, Any
from app.core.config import settings

# Inicializa a vari√°vel do modelo
model = None

# Tenta configurar a API ao iniciar o m√≥dulo
try:
    # Usando o nome do modelo que voc√™ confirmou estar dispon√≠vel
    genai.configure(api_key=settings.GOOGLE_API_KEY)
    
    # Configura√ß√£o de seguran√ßa para permitir respostas menos restritivas
    # √ötil para dados de neg√≥cios que podem ser falsamente sinalizados.
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
    ]
    
    model = genai.GenerativeModel('gemini-2.0-flash')
    print("‚úÖ Modelo de IA Gemini inicializado com sucesso.")

except Exception as e:
    print(f"‚ùå Erro ao configurar a API do Gemini: {e}")

def generate_analysis_from_data(user_question: str, system_data: str) -> str:
    """
    Recebe uma pergunta do usu√°rio e os dados do sistema, envia para a IA 
    com um prompt aprimorado e retorna a resposta.
    """
    if not model:
        return "Erro: O modelo de IA n√£o foi inicializado corretamente. Verifique a chave da API e a configura√ß√£o do servi√ßo no servidor."
     
    # Mega prompt para an√°lise assertiva de dados
    prompt_template = f"""
    Voc√™ √© a "Rozana", ASSISTENTE ESPECIALISTA EM GEST√ÉO DE ESTOQUE E AN√ÅLISE DE VENDAS da Higiplas.
    
    MISS√ÉO: Fornecer an√°lises ASSERTIVAS, PRECISAS e ACION√ÅVEIS baseadas nos dados reais da empresa.
    
    PERGUNTA DO GESTOR: "{user_question}"
    
    DADOS DISPON√çVEIS:
    {system_data}
    
    CAPACIDADES AVAN√áADAS:
    ‚úÖ Calcular estoque m√≠nimo baseado em demanda hist√≥rica
    ‚úÖ Identificar produtos cr√≠ticos que precisam de reposi√ß√£o URGENTE
    ‚úÖ Analisar rotatividade e sazonalidade de produtos
    ‚úÖ Detectar produtos parados que ocupam capital desnecess√°rio
    ‚úÖ Sugerir quantidades ideais de compra com base em lead time
    ‚úÖ Prever rupturas de estoque antes que aconte√ßam
    ‚úÖ Otimizar capital de giro atrav√©s de an√°lise de giro de estoque
    
    INSTRU√á√ïES PARA RESPOSTAS ASSERTIVAS:
    
    1. SEMPRE cruze os 3 datasets para an√°lises completas
    2. Para ESTOQUE M√çNIMO: Use f√≥rmula = (Demanda M√©dia Di√°ria √ó Lead Time) √ó Margem de Seguran√ßa
    3. Para PRODUTOS CR√çTICOS: Identifique onde estoque atual < estoque m√≠nimo calculado
    4. Para SUGEST√ïES DE COMPRA: Calcule quantidade = estoque_m√≠nimo - estoque_atual + demanda_prevista
    5. SEMPRE inclua n√∫meros concretos, percentuais e valores monet√°rios
    6. Priorize a√ß√µes por URG√äNCIA (Cr√≠tico > Alto > M√©dio > Baixo)
    7. Mencione impacto financeiro das recomenda√ß√µes
    8. Se dados insuficientes, seja claro sobre limita√ß√µes
    
    FORMATO DE RESPOSTA:
    - Seja DIRETO e OBJETIVO
    - Use bullet points para a√ß√µes
    - Inclua N√öMEROS e DADOS concretos
    - Destaque URG√äNCIAS com emojis (üö® Cr√≠tico, ‚ö†Ô∏è Aten√ß√£o, ‚úÖ OK)
    - Termine com pr√≥ximos passos claros
    - Use Markdown para formata√ß√£o
    
    EXEMPLOS DE AN√ÅLISES ASSERTIVAS:
    
    ‚ùå RUIM: "O produto X est√° com estoque baixo"
    ‚úÖ BOM: "üö® CR√çTICO: Produto X tem apenas 5 unidades (3 dias de cobertura). Demanda m√©dia: 1.7/dia. Sugest√£o: Comprar 25 unidades HOJE para 15 dias de cobertura."
    
    ‚ùå RUIM: "Alguns produtos vendem bem"
    ‚úÖ BOM: "üìà TOP 3 Alta Rotatividade: Produto A (45 vendas/m√™s, R$ 2.340 receita), Produto B (38 vendas/m√™s, R$ 1.890), Produto C (32 vendas/m√™s, R$ 1.280). Mantenha estoque alto destes."
    
    RESPONDA DE FORMA ASSERTIVA E ACION√ÅVEL:
    """
     
    try:
        print("[AI Service] Gerando conte√∫do com a API do Gemini...")
        response = model.generate_content(prompt_template)
        
        # Bloco de tratamento de erro para respostas bloqueadas
        try:
            print("[AI Service] Resposta da IA recebida.")
            return response.text
        except ValueError:
            print(f"‚ùå Resposta da IA bloqueada. Feedback do prompt: {response.prompt_feedback}")
            return f"A resposta da IA foi bloqueada por raz√µes de seguran√ßa. Verifique a pergunta ou os dados enviados. Motivo do bloqueio: {response.prompt_feedback}"

    except Exception as e:
        print(f"‚ùå Erro na comunica√ß√£o com a API do Gemini: {e}")
        return f"Ocorreu um erro ao comunicar com a IA: {e}"

def extract_products_from_invoice_image(image_bytes: bytes) -> str:
    """
    Usa o Gemini Pro Vision para extrair uma lista de produtos de uma imagem de nota fiscal.
    """
    if not model:
        raise Exception("Modelo de IA n√£o inicializado.")

    image_part = {"mime_type": "image/jpeg", "data": image_bytes}
    
    prompt = """
    Analise a imagem desta Nota Fiscal (DANFE) e extraia APENAS a tabela de produtos.
    Sua resposta deve ser um JSON contendo uma lista de objetos.
    Cada objeto deve ter as chaves "descricao" e "quantidade".
    Ignore impostos, totais e outras informa√ß√µes. Foque apenas na lista de itens.
    Se um produto n√£o tiver um c√≥digo √≥bvio, use o nome/descri√ß√£o como identificador.
    Exemplo de resposta: [{"descricao": "LUVA NITRILICA PRETA SEM PO TALGE CX 100UN.G", "quantidade": 60.0}, {"descricao": "SABAO EM PO OMO", "quantidade": 10.0}]
    """
    
    try:
        response = model.generate_content([prompt, image_part])
        return response.text
    except Exception as e:
        print(f"Erro na API Gemini Vision: {e}")
        raise