# /backend/app/prestart.py

import logging
import time
import json
import os
import traceback
from sqlalchemy.orm import Session
from sqlalchemy import text, inspect

from app.db.connection import engine, SessionLocal
from app.db.models import Base, VendaHistorica, Empresa

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_db_connection(db: Session, max_retries=15, wait=2):
    """Tenta conectar ao banco de dados com m√∫ltiplas tentativas."""
    logger.info("Verificando conex√£o com o banco de dados...")
    for i in range(max_retries):
        try:
            db.execute(text("SELECT 1"))
            logger.info("‚úÖ Conex√£o com o banco de dados bem-sucedida!")
            return True
        except Exception as e:
            logger.warning(f"Tentativa {i+1}/{max_retries} falhou. Banco de dados indispon√≠vel: {e}")
            time.sleep(wait)
    logger.error("‚ùå FALHA CR√çTICA: N√£o foi poss√≠vel conectar ao banco de dados.")
    return False

def ensure_tables_exist():
    """Garante que todas as tabelas definidas em Base.metadata existam."""
    logger.info("Verificando e criando tabelas, se necess√°rio...")
    try:
        # Inspeciona o banco para ver se a tabela j√° existe antes de tentar criar
        inspector = inspect(engine)
        if not inspector.has_table(VendaHistorica.__tablename__):
             logger.info(f"Tabela '{VendaHistorica.__tablename__}' n√£o encontrada. Criando todas as tabelas...")
             Base.metadata.create_all(bind=engine)
             logger.info("‚úÖ Todas as tabelas foram criadas/verificadas com sucesso.")
        else:
             logger.info(f"‚úÖ Tabela '{VendaHistorica.__tablename__}' j√° existe.")
             # Voc√™ ainda pode rodar o create_all para garantir outras tabelas
             Base.metadata.create_all(bind=engine)
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar as tabelas: {e}")
        traceback.print_exc()
        raise

def seed_data_if_empty(db: Session):
    """Popula a tabela de vendas hist√≥ricas apenas se ela estiver completamente vazia."""
    logger.info("Iniciando verifica√ß√£o de dados hist√≥ricos...")
    try:
        count = db.query(VendaHistorica).count()
        if count > 0:
            logger.info(f"Tabela 'vendas_historicas' j√° possui {count} registros. Seeding n√£o √© necess√°rio.")
            return

        logger.info("Tabela 'vendas_historicas' est√° vazia. Procurando pelo arquivo de dados...")
        
        # O caminho √© relativo ao WORKDIR, que √© /code no Dockerfile.
        json_path = "app/dados_historicos_vendas.json" 
        
        if not os.path.exists(json_path):
             logger.error(f"‚ùå ARQUIVO N√ÉO ENCONTRADO em '{json_path}'. O seeding n√£o pode continuar. Fa√ßa o commit do arquivo JSON.")
             return

        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        logger.info(f"Arquivo JSON encontrado com {len(data)} registros. Iniciando inser√ß√£o no banco...")

        for item in data:
            db_item = VendaHistorica(
                ident_antigo=item['ident_antigo'],
                descricao=item['descricao'],
                quantidade_vendida_total=item['quantidade_vendida_total'],
                custo_compra_total=item.get('custo_compra_total', 0), # Usar .get com valor padr√£o
                valor_vendido_total=item.get('valor_vendido_total', 0),
                lucro_bruto_total=item.get('lucro_bruto_total', 0),
                margem_lucro_percentual=item.get('margem_lucro_percentual', 0)
            )
            db.add(db_item)
        
        db.commit()
        logger.info(f"‚úÖ Seeding conclu√≠do! {len(data)} registros inseridos com sucesso em 'vendas_historicas'.")

    except Exception as e:
        logger.error(f"‚ùå Erro durante o processo de seeding: {e}")
        traceback.print_exc()
        db.rollback()


def main():
    logger.info("üöÄ Iniciando processo de pr√©-inicializa√ß√£o...")
    db_session = SessionLocal()
    try:
        if check_db_connection(db_session):
            ensure_tables_exist()
            seed_data_if_empty(db_session)
    finally:
        db_session.close()
    logger.info("üèÅ Processo de pr√©-inicializa√ß√£o finalizado.")

if __name__ == "__main__":
    main()