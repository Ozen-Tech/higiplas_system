#!/usr/bin/env python3

import requests
import json

def test_orcamento_query():
    """Testa diretamente a query de or√ßamentos que est√° causando o erro 500."""
    
    base_url = "https://higiplas-system.onrender.com"
    
    print("üîç Testando query de or√ßamentos que causa erro 500...")
    print(f"üåê Backend: {base_url}")
    
    # 1. Fazer login
    login_data = {
        "username": "enzo.alverde@gmail.com",
        "password": "enzolilia"
    }
    
    print("\n1Ô∏è‚É£ Fazendo login...")
    login_response = requests.post(f"{base_url}/users/token", data=login_data)
    print(f"   Status do login: {login_response.status_code}")
    
    if login_response.status_code != 200:
        print(f"‚ùå Erro no login: {login_response.text}")
        return
    
    token = login_response.json()["access_token"]
    headers = {"Authorization": f"Bearer {token}"}
    print("‚úÖ Login realizado com sucesso!")
    
    # 2. Testar endpoint de or√ßamentos (que est√° falhando)
    print("\n2Ô∏è‚É£ Testando endpoint /orcamentos (que causa erro 500)...")
    try:
        orcamentos_response = requests.get(f"{base_url}/orcamentos", headers=headers, timeout=30)
        print(f"   Status: {orcamentos_response.status_code}")
        
        if orcamentos_response.status_code == 200:
            orcamentos = orcamentos_response.json()
            print(f"   ‚úÖ {len(orcamentos)} or√ßamentos encontrados")
        else:
            print(f"   ‚ùå Erro: {orcamentos_response.text}")
            
    except requests.exceptions.Timeout:
        print("   ‚ùå Timeout na requisi√ß√£o (>30s)")
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o: {e}")
    
    # 3. Testar query simples de contagem (similar ao DELETE)
    print("\n3Ô∏è‚É£ Testando se conseguimos fazer uma query simples de or√ßamentos...")
    
    # Primeiro, pegar um cliente para testar
    clientes_response = requests.get(f"{base_url}/clientes", headers=headers)
    if clientes_response.status_code == 200:
        clientes = clientes_response.json()
        if clientes:
            cliente_id = clientes[0]['id']
            print(f"   üìã Testando com cliente ID: {cliente_id}")
            
            # Tentar acessar or√ßamentos espec√≠ficos (se houver endpoint)
            try:
                # Teste direto da query que o DELETE usa
                print("   üîç Simulando a verifica√ß√£o que o DELETE faz...")
                print("   (Esta √© a mesma query que est√° causando o problema no DELETE)")
                
                # O DELETE faz: db.query(models.Orcamento).filter(models.Orcamento.cliente_id == cliente_id).count()
                # Mas como n√£o temos acesso direto ao DB, vamos tentar o endpoint
                orcamentos_response = requests.get(f"{base_url}/orcamentos", headers=headers, timeout=10)
                
                if orcamentos_response.status_code == 500:
                    print("   ‚ùå Confirmado: A query de or√ßamentos est√° falhando com erro 500")
                    print("   üí° Isso explica por que o DELETE tamb√©m falha!")
                    
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
    
    print("\n=== AN√ÅLISE DO PROBLEMA ===")
    print("üîç O DELETE de clientes falha porque:")
    print("   1. Ele tenta verificar se h√° or√ßamentos associados")
    print("   2. A query de or√ßamentos est√° falhando com erro 500")
    print("   3. Isso causa o erro 500 no DELETE tamb√©m")
    print("\nüí° SOLU√á√ÉO: Corrigir o problema na query de or√ßamentos")
    print("   - Pode ser um problema de JOIN ou relacionamento")
    print("   - Ou um problema de timeout no banco de dados")
    print("   - Verificar logs do Render para mais detalhes")

if __name__ == "__main__":
    test_orcamento_query()